package de.voidnode.trading4j.domain.trades;

import java.util.List;
import java.util.Optional;

import de.voidnode.trading4j.domain.ForexSymbol;
import de.voidnode.trading4j.domain.Volume;
import de.voidnode.trading4j.domain.monetary.Money;
import de.voidnode.trading4j.domain.monetary.Price;
import de.voidnode.trading4j.domain.orders.ExecutionCondition;
import de.voidnode.trading4j.domain.orders.OrderType;

import static de.voidnode.trading4j.domain.orders.ExecutionCondition.STOP;
import static de.voidnode.trading4j.domain.orders.OrderType.BUY;

/**
 * Describes a complete trade from placing the pending order to closing or canceling with additional information about
 * its environment.
 * 
 * @author Raik Bieniek
 */
public class CompletedTrade extends BasicCompletedTrade {

    private final ForexSymbol symbol;
    private final Volume volume;
    private final Price spread;

    /**
     * Constructs an instance with all requiered values.
     * 
     * @param type
     *            see {@link #getType()}
     * @param executionCondition
     *            see {@link #getExecutionCondition()}
     * @param symbol
     *            see {@link #getSymbol()}
     * @param volume
     *            see {@link #getVolume()}
     * @param spread
     *            see {@link #getSpread()}
     * @param events
     *            see {@link #getEvents()}
     */
    public CompletedTrade(final OrderType type, final ExecutionCondition executionCondition, final ForexSymbol symbol,
            final Volume volume, final Price spread, final List<TradeEvent> events) {
        super(type, executionCondition, events);
        this.symbol = symbol;
        this.volume = volume;
        this.spread = spread;
    }

    /**
     * The forex pair that was traded.
     * 
     * @return The forex pair.
     */
    public ForexSymbol getSymbol() {
        return symbol;
    }

    /**
     * The volume that was/ should be traded.
     * 
     * @return The volume
     */
    public Volume getVolume() {
        return volume;
    }

    /**
     * The spread at the end of the trade.
     * 
     * @return The spread.
     */
    public Price getSpread() {
        return spread;
    }

    /**
     * The absolute profit generated by this trade measured in the quote currency of the traded symbol.
     * 
     * @return The absolute profit or an empty {@link Optional} if this trade was never opened or closed.
     */
    public Optional<Money> getAbsoluteProfit() {
        return getRelativeProfit().map(profit -> profit.multiply(volume, symbol.getQuoteCurrency()));
    }

    /**
     * A {@link CompletedTrade} is only equal to other {@link CompletedTrade}s with exactly the same values.
     */
    // CHECKSTYLE:OFF generated code
    @Override
    public boolean equals(final Object obj) {
        // CHECKSTYLE:ON
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (!(obj instanceof CompletedTrade)) {
            return false;
        }
        final CompletedTrade other = (CompletedTrade) obj;
        if (spread == null) {
            if (other.spread != null) {
                return false;
            }
        } else if (!spread.equals(other.spread)) {
            return false;
        }
        if (symbol == null) {
            if (other.symbol != null) {
                return false;
            }
        } else if (!symbol.equals(other.symbol)) {
            return false;
        }
        if (volume == null) {
            if (other.volume != null) {
                return false;
            }
        } else if (!volume.equals(other.volume)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((spread == null) ? 0 : spread.hashCode());
        result = prime * result + ((symbol == null) ? 0 : symbol.hashCode());
        result = prime * result + ((volume == null) ? 0 : volume.hashCode());
        return result;
    }

    @Override
    public String toString() {
        return "Trade " + symbol + " " + getType() + (getType() == BUY ? "  " : " ") + getExecutionCondition()
                + (getExecutionCondition() == STOP ? "  " : " ") + getVolume() + " "
                + (getRelativeProfit().isPresent() ? getRelativeProfit().get().toStringWithSign() : "canceled");
    }
}